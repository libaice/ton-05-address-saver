#include "imports/stdlib.fc";


(slice, slice) load_data() inline {
    slice ds = get_data().begin_parse();
    return (ds~load_msg_addr(), ds~load_msg_addr());
}

()save_data(slice manager_address, slice memorized_address) impure inline {
    cell cs = begin_cell().store_slice(manager_address).store_slice(memorized_address).end_cell();
    set_data(cs);
}

slice parse_sender_address(cell in_msg_full) inline {
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    slice sender_address = cs~load_msg_addr();
    return sender_address;
}


() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(32 + 32);

    slice sender_address = parse_sender_address(in_msg_full);

    ;; change memorized address
    if (op == 1) {
        (slice manager_address, slice memorized_address) = load_data();
        throw_if(1001, ~ equal_slices(sender_address, manager_address));
        slice new_memorized_address = in_msg_body~load_msg_addr();
        save_data(manager_address, new_memorized_address);

        ;;  send raw message
    } elseif (op == 2) {
        (slice manager_address, slice memorized_address) = load_data();
        cell msg = begin_cell()
            .store_uint(0x10, 6)
            .store_slice(sender_address)
            .store_grams(0)
            .store_uint(3, 32)
            .store_uint(query_id, 64)
            .store_slice(manager_address)
            .store_slice(memorized_address)
            .end_cell();
        send_raw_message(msg, 64);
    } else {
        throw(3);
    }
}
